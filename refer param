Here’s the situation:

1. Current State of Params

Every module is using local param_0, param_1, … coming from backend responses.

Some files (like swing_center.js) apply additional calculation logic before pushing into frontend charts/tables.

Others (like fii_dii_data.js) reorder/transform values but don’t rename params.

table.json already provides a mapping of param indices → meaning (e.g. param_0 = % Change, param_1 = Volume Spike, etc.).

Right now, each module is duplicating assumptions of what param_0, param_1 mean. This is fragile.

2. What You Asked

You want to:

Keep params as-is (param_0, param_1, …).

Create a global param definition (based on table.json) → so both backend and frontend consume the same dictionary.

Update all modules so they don’t “guess” what each param means, but import/use global param metadata.

Provide this in a README.md for your team + sample before/after JSON transformation.

3. Fix Plan (Global Params System)
(A) Define Global Params (from table.json)

Create a global_params.json at root:

{
  "param_0": "Price Change %",
  "param_1": "Volume Spike",
  "param_2": "Delivery %",
  "param_3": "OI Change",
  "param_4": "Momentum Score",
  "param_5": "Sector Strength",
  "param_6": "Relative Flow",
  "param_7": "Liquidity Sweep",
  "param_8": "Swing Center",
  "param_9": "Money Flux"
}


(Fill this completely from your table.json — above is just sample.)

(B) Backend Enforcement

Whenever backend sends data, it should wrap raw params into unified param dictionary.

Before (Raw JSON):

{
  "Symbol": "RELIANCE",
  "param_0": 1.56,
  "param_1": 250000,
  "param_2": 67.5
}


After (Unified JSON):

{
  "Symbol": "RELIANCE",
  "params": {
    "param_0": { "label": "Price Change %", "value": 1.56 },
    "param_1": { "label": "Volume Spike", "value": 250000 },
    "param_2": { "label": "Delivery %", "value": 67.5 }
  }
}

(C) Frontend Usage

Instead of directly calling value.param_0, frontend should map like:

const { params } = value;
let priceChange = params.param_0.value;
let volumeSpike = params.param_1.value;


Charts/tables stay unchanged, but now they read from global param dictionary.

(D) Swing Center Calculation

You mentioned you’ve changed the way of calculations for Swing Center.
✅ Since we now have a global_params.json, you only need to define:

"param_8": "Swing Center (Custom Calculation v2)"


and make sure swing_center.js uses that consistently.
This ensures even custom-calculated params remain globally tagged.

4. README.md for Your Team (Draft)
# Global Params Integration Guide

## Why
Currently, each module assumes different meanings for `param_0`, `param_1`, etc.  
This causes mismatches between backend and frontend.  
We now unify all params via a single `global_params.json`.

---

## Global Param Dictionary
Defined in: `/config/global_params.json`

Example:

```json
{
  "param_0": "Price Change %",
  "param_1": "Volume Spike",
  "param_2": "Delivery %",
  "param_3": "OI Change",
  "param_4": "Momentum Score",
  "param_5": "Sector Strength",
  "param_6": "Relative Flow",
  "param_7": "Liquidity Sweep",
  "param_8": "Swing Center (v2 Calculation)",
  "param_9": "Money Flux"
}


This file is the single source of truth.

Data Transformation
Before (Raw Response from API)
{
  "Symbol": "RELIANCE",
  "param_0": 1.56,
  "param_1": 250000,
  "param_2": 67.5
}

After (Unified Response)
{
  "Symbol": "RELIANCE",
  "params": {
    "param_0": { "label": "Price Change %", "value": 1.56 },
    "param_1": { "label": "Volume Spike", "value": 250000 },
    "param_2": { "label": "Delivery %", "value": 67.5 }
  }
}

Backend Task

Ensure every API wraps raw values into the unified format before sending to frontend.

Use global_params.json to attach correct labels.

Frontend Task

Replace value.param_0 with value.params.param_0.value

Render tooltips/headers using value.params.param_0.label

All charts (swing_center.js, sectorial_flow.js, scanner.js, etc.) should reference the unified param dictionary.
